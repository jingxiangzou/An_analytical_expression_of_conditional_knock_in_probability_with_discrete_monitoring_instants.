import numpy as np
import pandas as pd
import random
import scipy as sp


class testclass:
    def __init__(self, sigma, duration, instants, s0, s1, ki):
        """
        :param sigma: volatility
        :param duration: duration, T
        :param instants: number of monitoring instants
        :param s0: starting price
        :param s1: ending price
        """
        self.sig = sigma
        self.T = duration
        self.m = instants
        self.s0 = s0
        self.s1 = s1
        self.ki = ki

    def ana_appro(self):
        beta = 0.5826
        adj_ki = self.ki * np.exp(-1 * beta * self.sig * np.sqrt(self.T/self.m))
        return np.exp((-2.0)/ (self.T * self.sig * self.sig) * np.log(adj_ki / self.s0) * np.log(adj_ki / self.s1))

    def mc_sim(self, nsim):
        count = 0
        for isim in range(nsim):
            a = np.random.normal(0, self.sig * np.sqrt(self.T/self.m), self.m)
            b = [0] * (self.m + 1)

            for i in range(self.m):
                b[i+1] = a[i] + b[i] # b is the BM
            c = [0] * (self.m + 1)

            for j in range(self.m + 1):
                c[j] = b[j] - (j / self.m) * b[-1] # the brownian bridge

            dd = [np.log(self.s1 / self.s0) * (ii / self.m) for ii in range(self.m + 1)]
            d = np.add(c, dd)
            e = [self.s0 * np.exp(d[jj]) for jj in range(self.m + 1)]
            if min(e) < self.ki:
                count += 1

        return (1.0000000 * count) / nsim


if __name__ == '__main__':
    test1 = testclass(0.1, 0.1, 100, 100, 100, 95)
    # volatility duration num_instants s0 s1 KI
    print('test 1')
    print(' duration =', test1.T, "years\n", 'num of instants =', test1.m)
    t1_ana = test1.ana_appro()
    print('our analytical approximation is ', t1_ana)
    s11 = test1.mc_sim(100000)
    s12 = test1.mc_sim(100000)
    s13 = test1.mc_sim(100000)
    s14 = test1.mc_sim(100000)
    s15 = test1.mc_sim(100000)
    print('simulation result(num of paths is 100000):', s11)
    print('simulation result(num of paths is 100000):', s12)
    print('simulation result(num of paths is 100000):', s13)
    print('simulation result(num of paths is 100000):', s14)
    print('simulation result(num of paths is 100000):', s15)

    print(round(t1_ana, 8))
    print(round((s11 + s12 + s13 + s14 + s15)/5, 8))
    print(round(t1_ana - (s11 + s12 + s13 + s14 + s15)/5, 8))

    test2 = testclass(0.1, 0.1, 200, 100, 100, 95)
    # volatility duration num_instants s0 s1 KI
    print('test 2')
    print(' duration =', test2.T, "years\n", 'num of instants =', test2.m)
    t2_ana = test2.ana_appro()
    print('our analytical approximation is ', t2_ana)
    s21 = test2.mc_sim(100000)
    s22 = test2.mc_sim(100000)
    s23 = test2.mc_sim(100000)
    s24 = test2.mc_sim(100000)
    s25 = test2.mc_sim(100000)
    print('simulation result(num of paths is 100000):', s21)
    print('simulation result(num of paths is 100000):', s22)
    print('simulation result(num of paths is 100000):', s23)
    print('simulation result(num of paths is 100000):', s24)
    print('simulation result(num of paths is 100000):', s25)

    print(round(t2_ana, 8))
    print(round((s21 + s22 + s23 + s24 + s25)/5, 8))
    print(round(t2_ana - (s21 + s22 + s23 + s24 + s25)/5, 8))

    test3 = testclass(0.1, 0.1, 50, 100, 100, 95)
    # volatility duration num_instants s0 s1 KI
    print('test 3')
    print(' duration =', test3.T, "years\n", 'num of instants =', test3.m)
    t3_ana = test3.ana_appro()
    print('our analytical approximation is ', t3_ana)
    s31 = test3.mc_sim(100000)
    s32 = test3.mc_sim(100000)
    s33 = test3.mc_sim(100000)
    s34 = test3.mc_sim(100000)
    s35 = test3.mc_sim(100000)
    print('simulation result(num of paths is 100000):', s31)
    print('simulation result(num of paths is 100000):', s32)
    print('simulation result(num of paths is 100000):', s33)
    print('simulation result(num of paths is 100000):', s34)
    print('simulation result(num of paths is 100000):', s35)

    print(round(t3_ana, 8))
    print(round((s31 + s32 + s33 + s34 + s35)/5, 8))
    print(round(t3_ana - (s21 + s22 + s23 + s24 + s25)/5, 8))







